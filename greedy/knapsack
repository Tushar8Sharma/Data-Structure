{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of knapsack","provenance":[{"file_id":"1byXMz2fwnMxzLoOrDTz9tdNr15izRTT9","timestamp":1578585461836}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"E4H7p6MkSZP8","colab_type":"code","colab":{}},"source":["class heap():\n","  def __init__(self,pro,wei,ratio):\n","    self.pro = pro\n","    self.wei = wei\n","    self.ratio = ratio\n","\n","  def process(self):\n","    n = len(self.ratio)\n","    i = int(n/2)\n","    pro1 = [0]*(n)\n","    wei1 = [0]*(n)\n","    while(i>=0):\n","      self.max_heap(i,n)\n","      i-=1\n","    k=0\n","    j=n-1\n","    while(j>=0):\n","      pro1[k] = self.pro[0]\n","      wei1[k] = self.wei[0]\n","      k += 1\n","      self.pro[0] = self.pro[j]\n","      self.wei[0] = self.wei[j]\n","      self.ratio[0] = self.ratio[j]\n","      n = n-1\n","      self.max_heap(0,n)\n","      j=j-1\n","    return pro1,wei1\n","\n","  def max_heap(self,i,n):\n","    l = 2*i\n","    r = 2*i + 1\n","    if l<n and self.ratio[i]<self.ratio[l]:\n","      largest = l\n","    else:\n","      largest = i\n","    if r<n and self.ratio[largest]<self.ratio[r]:\n","      largest = r\n","    if largest != i:\n","      temp = self.ratio[i]\n","      self.ratio[i] = self.ratio[largest]\n","      self.ratio[largest] = temp\n","      temp = self.pro[i]\n","      self.pro[i] = self.pro[largest]\n","      self.pro[largest] = temp\n","      temp = self.wei[i]\n","      self.wei[i] = self.wei[largest]\n","      self.wei[largest] = temp\n","      self.max_heap(largest,n)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zuWDeR1FHCEJ","colab_type":"code","colab":{}},"source":["class knapsack():\n","  def __init__(self,pro,wei,bag):\n","    self.pro = pro\n","    self.wei = wei\n","    self.ratio = [0]*(len(pro))\n","    self.bag = bag\n","    for i in range(len(pro)):\n","      self.ratio[i] = pro[i]/wei[i]\n","  \n","  def greedy(self):\n","    x = heap(self.pro,self.wei,self.ratio) \n","    self.pro,self.wei = x.process()\n","    profit = 0\n","    for i in range(len(self.pro)):\n","      if self.bag>0 and self.wei[i]<self.bag:\n","        self.bag -= self.wei[i]\n","        profit += self.pro[i]\n","      else:\n","        break\n","    if self.bag>0:\n","      profit += self.pro[i]*(self.bag/self.wei[i]) \n","    return profit"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LQquJox8Lsv0","colab_type":"code","colab":{}},"source":["pro = [10,5,15,7,6,18,3]\n","wei = [2,3,5,7,1,4,1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"vxMigGhTQVJ6","colab_type":"code","colab":{}},"source":["k = knapsack(pro,wei,15)\n","profit = k.greedy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L7CwkQ9CQtkf","colab_type":"code","outputId":"3e5c9341-df41-49e5-ce69-ca3947214492","executionInfo":{"status":"ok","timestamp":1578155204699,"user_tz":-330,"elapsed":835,"user":{"displayName":"Tushar Sharma","photoUrl":"","userId":"06550881778937858192"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["profit"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["55.333333333333336"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"qPJKxYRjQukf","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}